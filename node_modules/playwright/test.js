/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const pwt = require('./lib/index');
const playwright = require('./index');
const combinedExports = {
  ...playwright,
  ...pwt,
};

Object.defineProperty(combinedExports, '__esModule', { value: true });

module.exports = combinedExports;

const { test, expect } = require('@playwright/test');

test('check if HTML is UTF-8 encoded', async ({ page }) => {
  // Navigate to your website
  await page.goto('http://localhost:3000'); // Replace with your target URL

  // Fetch the charset attribute from the meta tag
  const charset = await page.$eval(
    'meta[charset], meta[http-equiv="Content-Type"]',
    (element) => element.charset || new URLSearchParams(element.content).get('charset')
  );

  // Assert that the charset is UTF-8
  expect(charset?.toLowerCase()).toBe('utf-8');
});


test('check meta description content', async ({ page }) => {
  // Navigate to your website
  await page.goto('http://localhost:3000'); // Replace with your URL

  // Fetch the content of the meta description
  const metaDescription = await page.$eval(
    'meta[name="description"]',
    (element) => element.content
  );

  // Define the expected meta description content
  const expectedMetaDescription = 'Your expected meta description here';

  // Assert that the actual meta description matches the expected one
  expect(metaDescription).toBe(expectedMetaDescription);
});


test('check page title', async ({ page }) => {
  // Navigate to your website
  await page.goto('http://localhost:3000'); // Replace with your target URL

  // Define the expected title
  const expectedTitle = 'Your Expected Page Title';

  // Fetch the actual title
  const actualTitle = await page.title();

  // Assert that the actual title matches the expected title
  expect(actualTitle).toBe(expectedTitle);
});



test('check if the hero section exists', async ({ page }) => {
  // Navigate to your website
  await page.goto('http://localhost:3000'); // Replace with your target URL

  // Define the selector for the hero section
  const heroSectionSelector = '.hero-section'; // Replace with the actual selector for your hero section

  // Check if the hero section is present and visible
  const heroSection = page.locator(heroSectionSelector);
  await expect(heroSection).toBeVisible();
});

test('check if the hero section has an h1 element', async ({ page }) => {
  // Navigate to your website
  await page.goto('http://localhost:3000'); // Replace with your target URL

  // Define the selector for the hero section
  const heroSectionSelector = '.hero-section'; // Replace with your hero section selector

  // Define the selector for the h1 element within the hero section
  const h1InHeroSectionSelector = `${heroSectionSelector} h1`;

  // Check if the h1 element is present and visible in the hero section
  const h1Element = page.locator(h1InHeroSectionSelector);
  await expect(h1Element).toBeVisible();
});